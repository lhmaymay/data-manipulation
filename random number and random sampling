from sklearn.model_selection import train_test_split
import pandas as pd
import numpy as np
# np.random.choice


#Create function for simulating die roll 
#The die can take values from 1 to 100. If the number is between 1 #and 51, the house wins. 
#If the number is between 52 and 100, the player wins.
def rolldice():
    
    dice = random.randint(1,100)
    
    if dice <=51:
        return False
    elif dice >51 & dice <=100:
        return True
        
########################################### random sampling algorithm #############################################################


#1:simple random sampling
sample_df=df.sample(1000)
sample_df=df.sample(frac=0.8)

#2:stratified sampling
X_train, X_test, y_train, y_test = train_test_split(diabetes.loc[:, diabetes.columns != 'class'], diabetes['class'], 
                                                      test_size=0.3, stratify=diabetes['class'], random_state=66)
                                                      
#3:Reservior sampling
#Reservoir sampling is super useful when there is an endless stream of data and your goal is to grab a small sample with uniform probability.
#Given a sample of size K with N items processed so far, the chance for any item to be selected is K/N. When the next item comes in, 
#current sample has a chance to survive K/N*N/(N+1)=K/(N+1) while the new item has chance K/(N+1) to be selected.
#Reservoir sampling is a family of randomized algorithms for randomly choosing k samples from a list of n items, 
#where n is either a very large or unknown number. Typically n is large enough that the list doesn’t fit into main memory. 
#For example, a list of search queries in Google and Facebook.
#So we are given a big array (or stream) of numbers (to simplify), and we need to write an efficient function to randomly 
#select k numbers where 1 <= k <= n. Let the input array be stream[].

#A simple solution is to create an array reservoir[] of maximum size k. One by one randomly select an item from stream[0..n-1]. 
#If the selected item is not previously selected, then put it in reservoir[]. To check if an item is previously selected or not, 
#we need to search the item in reservoir[]. The time complexity of this algorithm will be O(k^2). This can be costly if k is big. 
#Also, this is not efficient if the input is in the form of a stream.
#It can be solved in O(n) time. The solution also suits well for input in the form of stream. The idea is similar to this post. 
#Following are the steps.
#1) Create an array reservoir[0..k-1] and copy first k items of stream[] to it.
#2) Now one by one consider all items from (k+1)th item to nth item.
#…a) Generate a random number from 0 to i where i is index of current item in stream[]. Let the generated random number is j.
#…b) If j is in range 0 to k-1, replace reservoir[j] with arr[i]
# example 1:
# An efficient Python3 program  
# to randomly select k items 
# from a stream of items 
import random 
# A utility function  
# to print an array 
def printArray(stream,n): 
    for i in range(n): 
        print(stream[i],end=" "); 
    print(); 
  
# A function to randomly select 
# k items from stream[0..n-1]. 
def selectKItems(stream, n, k): 
        i=0;  
        # index for elements 
        # in stream[] 
          
        # reservoir[] is the output  
        # array. Initialize it with 
        # first k elements from stream[] 
        reservoir = [0]*k; 
        for i in range(k): 
            reservoir[i] = stream[i]; 
          
        # Iterate from the (k+1)th 
        # element to nth element 
        while(i < n): 
            # Pick a random index 
            # from 0 to i. 
            j = random.randrange(i+1); 
              
            # If the randomly picked 
            # index is smaller than k, 
            # then replace the element 
            # present at the index 
            # with new element from stream 
            if(j < k): 
                reservoir[j] = stream[i]; 
            i+=1; 
          
        print("Following are k randomly selected items"); 
        printArray(reservoir, k); 
      
# Driver Code 
  
if __name__ == "__main__": 
    stream = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]; 
    n = len(stream); 
    k = 5; 
    selectKItems(stream, n, k); 
    
    
#example 2:
import random
def generator(max):
    number = 1
    while number < max:
        number += 1
        yield number
# Create as stream generator
stream = generator(10000)
# Doing Reservoir Sampling from the stream
k=5
reservoir = []
for i, element in enumerate(stream):
    if i+1<= k:
        reservoir.append(element)
    else:
        probability = k/(i+1)
        if random.random() < probability:
            # Select item in stream and remove one of the k items already selected
             reservoir[random.choice(range(0,k))] = element
print(reservoir)

#4:Random Undersampling and Oversampling

#5: Undersampling and Oversampling using imbalanced-learn
#Oversampling using SMOTE,In SMOTE (Synthetic Minority Oversampling Technique) 
#we synthesize elements for the minority class, in the vicinity of already existing elements.

#6: Thompson sampling
